{
  "version": 3,
  "sources": ["../../../../../../node_modules/@taiga-ui/cdk/fesm2022/taiga-ui-cdk-directives-let.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { inject, ViewContainerRef, TemplateRef, Directive, Input } from '@angular/core';\n\n/**\n * @internal\n */\nclass TuiLetContext {\n  constructor(internalDirectiveInstance) {\n    this.internalDirectiveInstance = internalDirectiveInstance;\n  }\n  get $implicit() {\n    return this.internalDirectiveInstance.tuiLet;\n  }\n  get tuiLet() {\n    return this.internalDirectiveInstance.tuiLet;\n  }\n}\n\n/**\n * Works like *ngIf but does not have a condition — use it to declare\n * the result of pipes calculation (i.e. async pipe)\n */\nclass TuiLet {\n  constructor() {\n    inject(ViewContainerRef).createEmbeddedView(inject(TemplateRef), new TuiLetContext(this));\n  }\n  /**\n   * Asserts the correct type of the context for the template that `TuiLet` will render.\n   *\n   * The presence of this method is a signal to the Ivy template type-check compiler that the\n   * `TuiLet` structural directive renders its template with a specific context type.\n   */\n  static ngTemplateContextGuard(_dir, _ctx) {\n    return true;\n  }\n  static {\n    this.ɵfac = function TuiLet_Factory(t) {\n      return new (t || TuiLet)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: TuiLet,\n      selectors: [[\"\", \"tuiLet\", \"\"]],\n      inputs: {\n        tuiLet: \"tuiLet\"\n      },\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiLet, [{\n    type: Directive,\n    args: [{\n      standalone: true,\n      selector: '[tuiLet]'\n    }]\n  }], function () {\n    return [];\n  }, {\n    tuiLet: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiLet, TuiLetContext };\n"],
  "mappings": ";;;;;;;;;;;AAMA,IAAM,gBAAN,MAAoB;AAAA,EAClB,YAAY,2BAA2B;AACrC,SAAK,4BAA4B;AAAA,EACnC;AAAA,EACA,IAAI,YAAY;AACd,WAAO,KAAK,0BAA0B;AAAA,EACxC;AAAA,EACA,IAAI,SAAS;AACX,WAAO,KAAK,0BAA0B;AAAA,EACxC;AACF;AAMA,IAAM,SAAN,MAAM,QAAO;AAAA,EACX,cAAc;AACZ,WAAO,gBAAgB,EAAE,mBAAmB,OAAO,WAAW,GAAG,IAAI,cAAc,IAAI,CAAC;AAAA,EAC1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,uBAAuB,MAAM,MAAM;AACxC,WAAO;AAAA,EACT;AAAA,EACA,OAAO;AACL,SAAK,OAAO,SAAS,eAAe,GAAG;AACrC,aAAO,KAAK,KAAK,SAAQ;AAAA,IAC3B;AAAA,EACF;AAAA,EACA,OAAO;AACL,SAAK,OAAyB,kBAAkB;AAAA,MAC9C,MAAM;AAAA,MACN,WAAW,CAAC,CAAC,IAAI,UAAU,EAAE,CAAC;AAAA,MAC9B,QAAQ;AAAA,QACN,QAAQ;AAAA,MACV;AAAA,MACA,YAAY;AAAA,IACd,CAAC;AAAA,EACH;AACF;AAAA,CACC,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,QAAQ,CAAC;AAAA,IAC/E,MAAM;AAAA,IACN,MAAM,CAAC;AAAA,MACL,YAAY;AAAA,MACZ,UAAU;AAAA,IACZ,CAAC;AAAA,EACH,CAAC,GAAG,WAAY;AACd,WAAO,CAAC;AAAA,EACV,GAAG;AAAA,IACD,QAAQ,CAAC;AAAA,MACP,MAAM;AAAA,IACR,CAAC;AAAA,EACH,CAAC;AACH,GAAG;",
  "names": []
}
